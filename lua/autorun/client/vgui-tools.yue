concommand_Add = concommand.Add
string_format = string.format
string_find = string.find
pairs = pairs
Msg = Msg

meta = FindMetaTable( "Panel" )
toString = meta.__tostring
getName = meta.GetName
remove = meta.Remove

isValidPanel = nil
do
    isValid = meta.IsValid
    ispanel = ispanel
    isValidPanel = ( any ) ->
        return ispanel( any ) and isValid( any )

_R = debug.getregistry!

concommand_Add( "vgui_remove", ( ply, cmd, args ) ->
    for _, panel in pairs( _R )
        unless isValidPanel( panel )
            continue

        name = getName( panel )
        for pattern in *args
            if string_find( name, pattern, 1, false )
                Msg( string_format( "[%s] %s has been removed.\n", cmd, toString( panel ) ) )
                remove( panel )
                break
)

concommand_Add( "vgui_list", ( ply, cmd, args ) ->
    startPos, endPos = args[ 1 ], args[ 2 ]
    hasArgs = startPos ~= nil or endPos ~= nil
    counter = 0

    if hasArgs
        if startPos
            startPos = tonumber( startPos ) or 1
        else
            startPos = 1

        if endPos
            endPos = tonumber( endPos ) or startPos
        else
            startPos, endPos = 1, startPos

    Msg( string_format( "[%s] Panel list:\n", cmd ) )

    for _, panel in pairs( _R )
        unless isValidPanel( panel )
            continue

        counter += 1

        if hasArgs
            if counter < startPos
                continue
            elseif counter > endPos
                break

        Msg( string_format( "%d. %s\n", counter, toString( panel ) ) )
)