:find, :format = string
:Add = concommand
MsgN = MsgN

PANEL = FindMetaTable( "Panel" )
:Remove, :GetName, :__tostring = PANEL

getPanels = nil
do

    GetHUDPanel = GetHUDPanel
    :GetWorldPanel = vgui

    panels, length = setmetatable( {}, { __mode: "v" } ), 0

    addPanel = ( onlyParents ) =>
        unless onlyParents
            for child in *@GetChildren!
                addPanel( child )

        length += 1
        panels[ length ] = @

    getPanels = ( onlyParents ) ->
        for index = 1, length
            panels[ index ] = nil

        length = 0
        for child in *GetHUDPanel!\GetChildren!
            addPanel( child, onlyParents )

        for child in *GetWorldPanel!\GetChildren!
            addPanel( child, onlyParents )

        return panels

do

    remove = ( cmd, patterns, onlyParents ) ->
        for panel in *getPanels( onlyParents )
            unless panel\IsValid!
                continue

            name = GetName( panel )
            for pattern in *patterns
                if find( name, pattern, 1, false ) ~= nil
                    MsgN( "[" .. cmd .. "] " .. __tostring( panel ) .. " has been removed." )
                    Remove( panel )
                    break

    Add "vgui_remove", ( _, cmd, args ) ->
        remove( cmd, args, true )

    Add "vgui_remove_all", ( _, cmd, args ) ->
        remove( cmd, args, false )

printTree = nil
do

    :band, :bor = bit

    printTree = ( level, isLast, finishedLevels ) =>
        finishedLevels = finishedLevels or 0
        space = ""

        if isLast
            finishedLevels = bor( finishedLevels, 2 ^ level )

        for i = 1, level - 1
            if band( finishedLevels, 2 ^ i ) == 0
                space ..= "║   "
            else
                space ..= "    "

        children = @GetChildren!
        count = #children

        MsgN( space .. "║" )
        MsgN( space .. ( isLast and "╚" or "╠" ) .. "══ " .. __tostring( @ ) )

        if count == 0
            return

        for i = 1, count
            printTree( children[ i ], level + 1, i == count, finishedLevels )

Add "vgui_list", ( _, cmd, args ) ->
    startPos, endPos = args[ 1 ], args[ 2 ]
    hasArgs = startPos ~= nil or endPos ~= nil

    if hasArgs
        if startPos
            startPos = tonumber( startPos ) or 1
        else
            startPos = 1

        if endPos
            endPos = tonumber( endPos ) or startPos
        else
            endPos = startPos

    MsgN( "[" .. cmd .. "] Panels: " )
    counter = 0

    for panel in *getPanels( true )
        counter += 1

        if hasArgs
            if counter < startPos
                continue

            if counter > endPos
                break

        MsgN( __tostring( panel ) )

        unless hasArgs
            continue

        children = panel\GetChildren!
        count = #children
        if count == 0
            return

        for i = 1, count
            printTree( children[ i ], 1, i == count )

    MsgN!

Add "vgui_find", ( _, cmd, args ) ->
    founded, length = {}, 0

    for panel in *getPanels( false )
        name = GetName( panel )
        for pattern in *args
            if find( name, pattern, 1, false ) ~= nil
                length += 1
                founded[ length ] = __tostring( panel )

    if length == 0
        MsgN( "[" .. cmd .. "] Panels not found." )
        return

    MsgN( "[" .. cmd .. "] Found " .. length .. " panels: " )
    for index = 1, length
        MsgN( founded[ index ] )
